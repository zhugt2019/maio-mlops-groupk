# .github/workflows/release.yml
name: Create Release and Publish to GHCR

on:
  push:
    tags:
      - 'v*.*' # 在 v0.1, v0.2 等标签上运行

env:
  IMAGE_NAME: ${{ github.repository }} 

jobs:
  release:
    name: Build, Test, and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write      # 创建 GitHub Releases
      packages: write    # 推送镜像到 GHCR
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get release version from tag
        run: echo "RELEASE_VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}

      - name: Run container smoke test
        run: |
          echo "正在启动容器 (${{ env.RELEASE_VERSION }}) 进行冒烟测试..."
          docker run -d -p 8080:8000 \
            -e MODEL_VERSION=${{ env.RELEASE_VERSION }} \
            --name test-container \
            ghcr.io/${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}

          echo "正在等待容器健康..."
          timeout=60
          while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://127.0.0.1:8080/health)" != "200" ]]; do
            if [ $timeout -le 0 ]; then
              echo "错误：容器在规定时间内未能变为健康状态。"
              docker logs test-container
              exit 1
            fi
            sleep 2; timeout=$((timeout - 2)); echo -n "."
          done
          echo "容器健康！"
          
          echo "正在安装测试依赖..."
          pip install pytest httpx
          
          echo "正在运行冒烟测试 (pytest tests/test_app.py)..."
          MODEL_VERSION=${{ env.RELEASE_VERSION }} \
          API_BASE_URL="http://127.0.0.1:8080" \
          pytest tests/test_app.py

      - name: Stop and remove container
        if: ${{ always() }}
        run: docker stop test-container && docker rm test-container

      - name: Extract Changelog Entry
        id: extract_changelog
        run: |
          RELEASE_NOTES=$(sed -n "/^## \[${{ env.RELEASE_VERSION }}\]/,/^## \[/p" CHANGELOG.md | sed '1d;$d')
          echo "body<<EOF" >> $GITHUB_ENV
          echo "${RELEASE_NOTES}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          body: |
            ${{ env.body }}